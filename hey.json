{
    "configs": {
        "human_number": "https://portugapt.github.io",
        "settings": {
            "include_drafts": false
        },
        "head": {
            "title": "Electric Toolbox | João Monteiro"
        },
        "contents": {
            "index": "content/index.md",
            "posts": "content/posts"
        },
        "sections": {
            "index": {
                "title": "Home",
                "description": "Home Page",
                "url": "/",
                "read_from": {
                    "type": "singular",
                    "path": "content/index.md"
                }
            },
            "posts": {
                "title": "Posts",
                "description": "Blog Posts",
                "url": "posts",
                "read_from": {
                    "type": "plural",
                    "path": "content/posts",
                    "each": "singular"
                }
            }
        }
    },
    "title": "Electric Toolbox | João Monteiro",
    "posts_section": {
        "title": "Posts",
        "breadcrumbs": {
            "path": "posts",
            "title": "Posts",
            "data": null,
            "previous_crumb": {
                "path": "/",
                "title": "Home",
                "data": null,
                "previous_crumb": null
            }
        },
        "items": [
            {
                "file_path": "content/posts/Functional Python: Better Error Handling with Railway Oriented Programming and the expression Library.md",
                "slug": "functional-python-better-error-handling-with-railway-oriented-programming-and-the-expression-library",
                "reading_time": "5 min",
                "contents": "<h2>Introduction</h2>\n<p>Python, known for its flexibility and readability, also embraces functional programming paradigms. While not a purely functional language like Haskell, Python supports concepts like higher-order functions, lambdas, and immutable data structures. These features allow us to write cleaner, more predictable, and easier-to-reason-about code.</p>\n<p>One powerful functional programming pattern making its way into the Python world is <strong>Railway Oriented Programming (ROP)</strong>. This approach, popularized by Scott Wlaschin in the F# community, provides an elegant way to handle errors and compose functions in a robust and predictable manner. In this post, we'll explore ROP and see how the <code>expression</code> library helps us implement it in Python using its <code>Result</code> and <code>Option</code> types.</p>\n<h2>What is Railway Oriented Programming?</h2>\n<p>Imagine building a railway track. You have two tracks: a \"success\" track and a \"failure\" track. Data flows along the \"success\" track until an error occurs. When an error happens, the data switches to the \"failure\" track and bypasses the remaining \"success-only\" operations.</p>\n<p>In ROP, functions are designed to handle both success and failure cases. They typically return a special type that can represent either a successful result or an error. This is where the <code>Result</code> type comes in.</p>\n<h2>The <code>Result</code> Type: Explicit Error Handling</h2>\n<p>The <code>expression</code> library provides a <code>Result</code> type that is similar to <code>Either</code> in other languages. A <code>Result</code> can either be <code>Ok(value)</code> representing a successful operation with a value or <code>Error(error)</code> representing a failed operation with an error value.</p>\n<div class=\"code-block\"><table class=\"code-blocktable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span></span><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">expression</span> <span class=\"kn\">import</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">Result</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">divide</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n<span class=\"w\">  </span><span class=\"sd\">&quot;&quot;&quot;Divides x by y, returning Ok(result) or Error(message).&quot;&quot;&quot;</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Division by zero&quot;</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">//</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example usage</span>\n<span class=\"n\">result1</span> <span class=\"o\">=</span> <span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok(5)</span>\n<span class=\"n\">result2</span> <span class=\"o\">=</span> <span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># Error(&quot;Division by zero&quot;)</span>\n\n<span class=\"k\">match</span> <span class=\"n\">result1</span><span class=\"p\">:</span>\n    <span class=\"k\">case</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Success: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Error: </span><span class=\"si\">{</span><span class=\"n\">err</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n<p>Instead of using exceptions, which can disrupt the normal flow of the program, <code>Result</code> makes error handling explicit. We can chain functions that return <code>Result</code> values, and the entire pipeline will short-circuit if any function returns an <code>Error</code>.</p>\n<h2>The <code>Option</code> Type: Handling Optional Values</h2>\n<p>Similar to <code>Result</code>, the <code>Option</code> type helps us deal with values that might be present or absent. It has two states: <code>Some(value)</code> when a value is present, and <code>Nothing</code> when a value is absent.</p>\n<div class=\"code-block\"><span class=\"filename\">My Cool Header</span><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">expression</span> <span class=\"kn\">import</span> <span class=\"n\">Some</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Option</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Option</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n<span class=\"w\">  </span><span class=\"sd\">&quot;&quot;&quot;Finds a user by username, returning Some(user) or Nothing.&quot;&quot;&quot;</span>\n  <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;alice&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Alice Smith&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bob&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob Johnson&quot;</span><span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"n\">username</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"n\">username</span><span class=\"p\">])</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Nothing</span>\n\n<span class=\"c1\"># Example usage</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">find_user</span><span class=\"p\">(</span><span class=\"s2\">&quot;alice&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Some(&quot;Alice Smith&quot;)</span>\n<span class=\"n\">no_user</span> <span class=\"o\">=</span> <span class=\"n\">find_user</span><span class=\"p\">(</span><span class=\"s2\">&quot;eve&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Nothing</span>\n\n<span class=\"k\">match</span> <span class=\"n\">user</span><span class=\"p\">:</span>\n    <span class=\"k\">case</span> <span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;User found: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">Nothing</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;User not found&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n<h2>Railway Oriented Programming with <code>expression</code></h2>\n<p>The <code>expression</code> library makes it easy to chain operations using the <code>pipe</code> function (similar to the pipe operator <code>|&gt;</code> in F#) or by chaining methods directly on <code>Result</code> and <code>Option</code> objects.</p>\n<div class=\"code-block\"><pre><span></span><code><span class=\"hll\"><span class=\"kn\">from</span> <span class=\"nn\">expression</span> <span class=\"kn\">import</span> <span class=\"n\">pipe</span><span class=\"p\">,</span> <span class=\"n\">Result</span><span class=\"p\">,</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Error</span>\n</span><span class=\"kn\">from</span> <span class=\"nn\">expression.core</span> <span class=\"kn\">import</span> <span class=\"n\">option</span>\n\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">parse_int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n</span><span class=\"w\">  </span><span class=\"sd\">&quot;&quot;&quot;Parses a string to an integer, returning Ok(int) or Error(message).&quot;&quot;&quot;</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n  <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Invalid integer: </span><span class=\"si\">{</span><span class=\"n\">s</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">divide_by_two</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Chaining operations using pipe</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pipe</span><span class=\"p\">(</span>\n  <span class=\"s2\">&quot;10&quot;</span><span class=\"p\">,</span>\n  <span class=\"n\">parse_int</span><span class=\"p\">,</span>\n  <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">add_one</span><span class=\"p\">),</span>  <span class=\"c1\"># Bind applies a function to the Ok value, or propagates Error</span>\n  <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">divide_by_two</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Error handling</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pipe</span><span class=\"p\">(</span>\n  <span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">,</span>\n  <span class=\"n\">parse_int</span><span class=\"p\">,</span>\n  <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">add_one</span><span class=\"p\">),</span>  <span class=\"c1\"># Bind applies a function to the Ok value, or propagates Error</span>\n  <span class=\"n\">Result</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">divide_by_two</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Benefits of ROP</h3>\n<ul>\n<li><strong>Explicit Error Handling:</strong> Errors are treated as data, making code easier to reason about.</li>\n<li><strong>Improved Readability:</strong> The flow of data through the pipeline is clear, even with error handling.</li>\n<li><strong>Composability:</strong> Functions that return <code>Result</code> or <code>Option</code> can be easily chained together.</li>\n<li><strong>Reduced Complexity:</strong> Avoids nested <code>try-except</code> blocks, leading to cleaner code.</li>\n<li><strong>Better Testability:</strong> Functions are easier to test because you can test both the success and failure cases directly.</li>\n</ul>\n<h2>Effects for Easier Composition</h2>\n<p>The <code>expression</code> library provides \"effects\" that simplify\ncomposing functions returning <code>Option</code> or <code>Result</code> values.</p>\n<div class=\"code-block\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">expression</span> <span class=\"kn\">import</span> <span class=\"n\">effect</span><span class=\"p\">,</span> <span class=\"n\">Ok</span><span class=\"p\">,</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">Result</span>\n\n<span class=\"nd\">@effect</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]()</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"n\">parsed_value</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">parse_int</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Result[int, str]</span>\n    <span class=\"n\">incremented_value</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">add_one</span><span class=\"p\">(</span><span class=\"n\">parsed_value</span><span class=\"p\">)</span>  <span class=\"c1\"># Result[int, str]</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">divide_by_two</span><span class=\"p\">(</span><span class=\"n\">incremented_value</span><span class=\"p\">)</span>  <span class=\"c1\"># Result[int, str]</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"c1\"># The effect handles the chaining and error propagation</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">process_data</span><span class=\"p\">(</span><span class=\"s2\">&quot;20&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok(10.5)</span>\n<span class=\"n\">error_result</span> <span class=\"o\">=</span> <span class=\"n\">process_data</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Error(&quot;Invalid integer: abc&quot;)</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n<p>Railway Oriented Programming, combined with the <code>Result</code> and <code>Option</code> types\nfrom the <code>expression</code> library, offers a\npowerful way to write robust and maintainable functional code in Python.\nBy making error handling\nexplicit and using functional composition, we can create code that is\neasier to understand,\ntest, and reason about. As Python continues to evolve,\nembracing functional paradigms\nlike ROP can lead to more elegant and resilient software.</p>\n<h2>Further Exploration</h2>\n<ul>\n<li><a href=\"https://expression.readthedocs.io/\">Expression library documentation</a></li>\n<li><a href=\"https://fsharpforfunandprofit.com/rop/\">Railway Oriented Programming (F# for Fun and Profit)</a></li>\n</ul>",
                "head_extras": null,
                "front_matter": {
                    "opengraph": {
                        "title": "Functional Python: Better Error Handling with Railway Oriented Programming and the expression Library",
                        "ogtype": "article",
                        "image": "https://i.imgur.com/es2jllc.png",
                        "locale": "en",
                        "description": null,
                        "site_name": null,
                        "url": null
                    },
                    "post_opengraph": {
                        "publication_time": "2025-02-01T15:30:00",
                        "modified_time": "2025-02-01T15:30:00",
                        "expiration_time": "2027-02-02T15:30:00",
                        "authors": [
                            {
                                "first_name": "João",
                                "last_name": "Monteiro",
                                "username": "Portugapt",
                                "gender": "male",
                                "email": null,
                                "url": null
                            }
                        ],
                        "section": "Functional Programming",
                        "tags": [
                            "Functional Programming"
                        ]
                    },
                    "stage": "draft",
                    "thumbnail": "https://i.imgur.com/JwNRwkL.jpeg",
                    "summary": null
                }
            }
        ],
        "url": "https://portugapt.github.io/posts"
    }
}